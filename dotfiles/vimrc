set nocompatible
filetype off

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Indentation related
set tabstop=4
set expandtab " Expand tab to spaces
set shiftwidth=4
set softtabstop=4
set autoindent

" View related
"set cursorline " Highlight cursor line set showmatch " Match brackets
syntax on

" Search related
set incsearch " Incremental search
set hlsearch " Highlight search
set ignorecase
set smartcase " Ignore ignorecase when uppercase characters are present

" Navigation related
set scrolloff=3 " Minimum number of lines to show below/above the cursor

" Shortcuts
set pastetoggle=<F2>


" Persistent undo
set undofile
set undolevels=1000
set undoreload=1000

" Fold baby fold
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

""" Plugins 
" Python autocomplete
Bundle 'Valloric/YouCompleteMe'

Bundle 'scrooloose/nerdtree'

" Modified lines since last commit in gutter
Bundle 'airblade/vim-gitgutter'

" Ctrl-P to browse files
Bundle 'kien/ctrlp.vim'

" Syntax checking for vim
Bundle "scrooloose/syntastic"

" Faster jumping around
Bundle "Lokaltog/vim-easymotion"
let g:EasyMotion_leader_key = '<Leader>'

" vim-tmux-navigator
Bundle "christoomey/vim-tmux-navigator"

Bundle "groenewege/vim-less"

call vundle#end()
filetype plugin indent on
"nnoremap ,m :w <BAR> !lessc % > %:p:r.css<CR><space>
au BufNewFile,BufRead *.less set filetype=less

autocmd FileType nerdtree setlocal nocursorcolumn

let g:path_to_matcher = "/usr/local/bin/matcher"

let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files . -co --exclude-standard']

let g:ctrlp_match_func = { 'match': 'GoodMatch' }

function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)

  " Create a cache file if not yet exists
  let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
  if !( filereadable(cachefile) && a:items == readfile(cachefile) )
    call writefile(a:items, cachefile)
  endif
  if !filereadable(cachefile)
    return []
  endif

  " a:mmode is currently ignored. In the future, we should probably do
  " something about that. the matcher behaves like "full-line".
  let cmd = g:path_to_matcher.' --limit '.a:limit.' --manifest '.cachefile.' '
  if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
    let cmd = cmd.'--no-dotfiles '
  endif
  let cmd = cmd.a:str

  return split(system(cmd), "\n")

endfunction


nnoremap <leader>jd :YcmCompleter GoTo<CR>

let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_quiet_messages = { "type": "style" }

nmap <leader>ne :NERDTreeToggle<cr>
